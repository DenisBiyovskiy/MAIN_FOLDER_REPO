/**************************************
 *  OkKoloBiz Messenger script, DCode.js code
 *  http://kolobiz.com/
 *
 *  Based on JavaScript , version 2.1.4, 02.12.2010
 *  (c) 2010 ZHdP
*****************/

var klb_channelId = Math.floor(Math.random() * 10000); // randomize the initial id in case of multiple closures loaded 
var klb_emptyFn = Function.prototype;
var klb_reSocket1 = /([^:]+:\/\/[^\/]+).*/; // returns groups for protocol (2), domain (3) and port (4) 
var klb_reSocket2 = /^#?\d+&/;
var klb_reSocket3 = /#.*$/; 
var klb_reSocket4 = /^#/; 
var klb_reWord = /\s/g;
var klb_reNBR = /([^>])\n/g;
var klb_reHttpORs = /^(http||https):\/\//; // returns groups for protocol (2), domain (3) and port (4) 
var klb_reURI = /^((http.?:)\/\/([^:\/\s]+)(:\d+)*)/; // returns groups for protocol (2), domain (3) and port (4) 
var klb_reParent = /[\-\w]+\/\.\.\//; // matches a foo/../ expression 
var klb_porthole = { regb: /\b_super\b/, regF: /.*/ };
var klb_reDoubleSlash = /([^:])\/\//g; // matches // anywhere but in the protocol
var klb_namespace = ""; // stores namespace under which easyXDM object is stored on the page (empty if object is global)

function hasFlash(){
    var name = "Shockwave Flash", mimeType = "application/x-shockwave-flash";

    if (!undef(navigator.plugins) && typeof navigator.plugins[name] == "object") {
        // adapted from the swfobject code
        var description = navigator.plugins[name].description;
        if (description && !undef(navigator.mimeTypes) && navigator.mimeTypes[mimeType] && navigator.mimeTypes[mimeType].enabledPlugin) {
            flashVersion = description.match(/\d+/g);
        }
    }
    if (!flashVersion) {
        var flash;
        try {
            flash = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            flashVersion = Array.prototype.slice.call(flash.GetVariable("$version").match(/(\d+),(\d+),(\d+),(\d+)/), 1);
            flash = null;
        } 
        catch (notSupportedException) {
        }
    }
    if (!flashVersion) {
        return false;
    }
    var major = parseInt(flashVersion[0], 10), minor = parseInt(flashVersion[1], 10);
    HAS_FLASH_THROTTLED_BUG = major > 9 && minor > 0;
    return true;
}

var DCodeUtils = {
	init: function() {
		this.base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	},
    RegExp: function(cmd) {
        switch(cmd) {
            
            case 'patSocket1':     return klb_reSocket1;
            case 'patSocket2':     return klb_reSocket2;
            case 'patSocket3':     return klb_reSocket3;
            case 'patSocket4':     return klb_reSocket4;
            case 'patHttpORs':     return klb_reHttpORs;
            case 'patDoubleSlash': return klb_reDoubleSlash;
            case 'patParent':      return klb_reParent;
            case 'patNBR':         return klb_reNBR;
            case 'patWord':        return klb_reWord;
            case 'patreURI': return klb_reURI;
            case 'reURI': return new RegExp(klb_reURI, 'ig'); 
            case 'xdm_c':  return "\/[\"'<>\\]/g, \"\")";
            case 'xdm_e':  return "\/[\"'<>\\]/g, \"\")";
            case 'url':   var pattern = "^(([^:/\\?#]+):)?(//(([^:/\\?#]*)(?::([^/\\?#]*))?))?([^\\?#]*)(\\?([^#]*))?(#(.*))?$";
                  return new RegExp(pattern, 'ig');
            case 'href': var parts = new RegExp("/href=['\"]?(.*)([#]{1}[^'\"<>]+)['\"]?/",'gi');
                  return parts; 
                break;
            case 'media':
                 return new RegExp("/(?:http:\/\/[\w.]+\/)?(?!:\/\/)[^<^>^\"^'^\s]+\.(?:aiff|au|avi|flv|mid|mov|mp3|ogg|ra|rm|spl|swf|wav|wma|wmv)(?!\w)/", 'ig');
                break;
            default:
        }
     return false;
    },
    tolink: function(text) {
       var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
       return text.replace(exp,"<a href='$1'>$1</a>");
   },
	tagstrip: function(html) {
        return html.replace(/<\/?[^>]+>/gi, '');
	},
	 base64_url_encode: function (_text) {
		if(_text.length == 0) return "";
		_text =  this.base64_encode((_text.toString()));
		var _preg = "/=/g"; _text = _text.replace(_preg, "_");
			_preg = "/\+/g"; _text = _text.replace(_preg, "-"); 
			_preg = "/\\"+"/"+"/g"; _text = _text.replace(_preg, ",");

		return _text;
	},

	 base64_url_decode: function (_text) {
		if(!(_text != null && _text.length > 0))
			return "";

		_text = _text.replace("_","=");
		_text = _text.replace("-","+");
		_text = _text.replace(",","/");
		_text = this.utf8_decode(this.base64_decode(_text));
		return _text;
	},

	 base64_decode: function (_text) {
		var bits; this.init();
		var decOut = '';
		var i = 0; 
	
		for(; i<_text.length; i += 4)
		{
			bits = (this.base64_chars.indexOf(_text.charAt(i)) & 0xff) <<18 |
			(this.base64_chars.indexOf(_text.charAt(i +1)) & 0xff) <<12 |
			(this.base64_chars.indexOf(_text.charAt(i +2)) & 0xff) << 6 |
			this.base64_chars.indexOf(_text.charAt(i +3)) & 0xff;
			decOut += String.fromCharCode((bits & 0xff0000) >>16, (bits & 0xff00) >>8, bits & 0xff);
		}

		if(_text.charCodeAt(i -2) == 61)
			return(decOut.substring(0, decOut.length -2));
		else if(_text.charCodeAt(i -1) == 61)
			return(decOut.substring(0, decOut.length -1));
		else 
			return(decOut);
	},

	  base64_encode: function (_input)  {
		   var output = ""; this.init();
		   var chr1, chr2, chr3;
		   var enc1, enc2, enc3, enc4;
		var i = 0;

		do  {
		   chr1 = _input.charCodeAt(i++);
		   chr2 = _input.charCodeAt(i++);
		   chr3 = _input.charCodeAt(i++);

		   enc1 = chr1 >> 2;
		   enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		   enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		   enc4 = chr3 & 63;

		   if (isNaN(chr2)) 
			  enc3 = enc4 = 64;
		   else if (isNaN(chr3)) 
			  enc4 = 64;
		
		   output = output + this.base64_chars.charAt(enc1) + this.base64_chars.charAt(enc2) +
			  this.base64_chars.charAt(enc3) + this.base64_chars.charAt(enc4);
		} 
		while (i < _input.length);
		return output;
	},

	 utf8_encode: function (_string,_encodeuri)  {
		_string = _string.replace(/\r\n/g,"\n");
		var utftext = "";
		for (var n = 0; n < _string.length; n++) 
		{
			var c = _string.charCodeAt(n);
			if (c < 128) 
			{
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) 
			{
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else 
			{
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
		}
		if(_encodeuri)
			return encodeURIComponent(utftext);
		else
			return utftext;
	},

	 utf8_decode: function (utftext) {
		var string = "";
		var i = 0;
		var c, c1, c2
		c = c1 = c2 = 0;

		while ( i < utftext.length )  {
			c = utftext.charCodeAt(i);
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) 
			{
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			} else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
		}
		return string;
	},

	// public method for url encoding
	encode : function (string) {
		return escape(this._utf8_encode(string));
	},

	// public method for url decoding
	decode : function (string) { 	  // Return the decoded string
		var lsRegExp = /\+/g;
  	    psEncodeString = unescape(String(string).replace(lsRegExp, " "));
		return this._utf8_decode( psEncodeString );
	},

	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},

	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 1; // 0
		var c = c1 = c2 = 0;

		while ( i < utftext.length ) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
			  	   string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	}
}

var Utf8 = {};  // Utf8 namespace

/**
 * Encode multi-byte Unicode string into utf-8 multiple single-byte characters 
 * (BMP / basic multilingual plane only)
 *
 * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars
 *
 * @param {String} strUni Unicode string to be encoded as UTF-8
 * @returns {String} encoded string
 */
Utf8.encode = function(strUni) {
  // use regular expressions & String.replace callback function for better efficiency 
  // than procedural approaches
  var strUtf = strUni.replace(
      /[\u0080-\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz
      function(c) { 
        var cc = c.charCodeAt(0);
        return String.fromCharCode(0xc0 | cc>>6, 0x80 | cc&0x3f); }
    );
  strUtf = strUtf.replace(
      /[\u0800-\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz
      function(c) { 
        var cc = c.charCodeAt(0); 
        return String.fromCharCode(0xe0 | cc>>12, 0x80 | cc>>6&0x3F, 0x80 | cc&0x3f); }
    );
  return strUtf;
}

/**
 * Decode utf-8 encoded string back into multi-byte Unicode characters
 *
 * @param {String} strUtf UTF-8 string to be decoded back to Unicode
 * @returns {String} decoded string
 */
Utf8.decode = function(strUtf) {
  // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!
  var strUni = strUtf.replace(
      /[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g,  // 3-byte chars
      function(c) {  // (note parentheses for precence)
        var cc = ((c.charCodeAt(0)&0x0f)<<12) | ((c.charCodeAt(1)&0x3f)<<6) | ( c.charCodeAt(2)&0x3f); 
        return String.fromCharCode(cc); }
    );
  strUni = strUni.replace(
      /[\u00c0-\u00df][\u0080-\u00bf]/g,                 // 2-byte chars
      function(c) {  // (note parentheses for precence)
        var cc = (c.charCodeAt(0)&0x1f)<<6 | c.charCodeAt(1)&0x3f;
        return String.fromCharCode(cc); }
    );
  return strUni;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

var Base64 = {
     repmat: function(_nmber, _data, _mtch) {
        var strRE = '/\{'+_nmber+'\}/g';  var re = new RegExp(strRE);
       return _data.replace(/\{1\}/g, _mtch);
     },
     inner: function(_data) {
            elem = elem.replace(/(<(\w+)[^>]*?)\/>/g, function(all, front, tag){
                    return tag.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i) ? all : front + "></" + tag + ">";
            });
    },
    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
 
        input = Base64._utf8_encode(input);
 
        while (i < input.length) {
 
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
 
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
 
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
 
            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
        }
        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        while (i < input.length) {
            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
            output = Base64._utf8_decode(output);
        return output;
    },
 
     utfencode: function(str, utf8encode) {  // http://tools.ietf.org/html/rfc4648
      utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;
      var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;
      var b64 = Base64._keyStr;
       
      plain = utf8encode ? Utf8.encode(str) : str;
      
      c = plain.length % 3;  // pad string to length of multiple of 3
      if (c > 0) { while (c++ < 3) { pad += '='; plain += '\0'; } }
      // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars
       
      for (c=0; c<plain.length; c+=3) {  // pack three octets into four hexets
        o1 = plain.charCodeAt(c);
        o2 = plain.charCodeAt(c+1);
        o3 = plain.charCodeAt(c+2);
          
        bits = o1<<16 | o2<<8 | o3;
          
        h1 = bits>>18 & 0x3f;
        h2 = bits>>12 & 0x3f;
        h3 = bits>>6 & 0x3f;
        h4 = bits & 0x3f;

        // use hextets to index into code string
        e[c/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
      }
      coded = e.join('');  // join() is far faster than repeated string concatenation in IE
      
      // replace 'A's from padded nulls with '='s
      coded = coded.slice(0, coded.length-pad.length) + pad;
       
      return coded;
    },

    utfdecode: function(str, utf8decode) {
      utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;
      var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;
      var b64 = Base64._keyStr;

      coded = utf8decode ? Utf8.decode(str) : str;

      for (var c=0; c<coded.length; c+=4) {  // unpack four hexets into three octets
        h1 = b64.indexOf(coded.charAt(c));
        h2 = b64.indexOf(coded.charAt(c+1));
        h3 = b64.indexOf(coded.charAt(c+2));
        h4 = b64.indexOf(coded.charAt(c+3));
          
        bits = h1<<18 | h2<<12 | h3<<6 | h4;
          
        o1 = bits>>>16 & 0xff;
        o2 = bits>>>8 & 0xff;
        o3 = bits & 0xff;
        
        d[c/4] = String.fromCharCode(o1, o2, o3);
        // check for padding
        if (h4 == 0x40) d[c/4] = String.fromCharCode(o1, o2);
        if (h3 == 0x40) d[c/4] = String.fromCharCode(o1);
      }
      plain = d.join('');  // join() is far faster than repeated string concatenation in IE
      
      return utf8decode ? Utf8.decode(plain) : plain; 
    },

    _utf8_char_encode: function (c) {
            var utftext = ""; 
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        return utftext;
     },
     // private method for UTF-8 encoding   
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
 
        for (var n = 0; n < string.length; n++) {
 
            var c = string.charCodeAt(n);
            utftext += Base64._utf8_char_encode(c);
        }
 
        return utftext;
    },
    _utf8_char_decode : function (c) {  
            var utftext = ''; i = 1;
            if (c < 128) {
                utftext += String.fromCharCode(c);
                i = 1;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                utftext += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i = 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                utftext += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i = 3;
            }
            return utftext;
    },
    // private method for UTF-8 decoding
    
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;
        while ( i < utftext.length ) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    },
    ord: function (string) {
      // http://kevin.vanzonneveld.net
      // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
      // +   bugfixed by: Onno Marsman
      // +   improved by: Brett Zamir (http://brett-zamir.me)
      // +   input by: incidence
      // *     example 1: ord('K');
      // *     returns 1: 75
      // *     example 2: ord('\uD800\uDC00'); // surrogate pair to create a single Unicode character
      // *     returns 2: 65536
      var str = string + '',
        code = str.charCodeAt(0);
      if (0xD800 <= code && code <= 0xDBFF) { // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
        var hi = code;
        if (str.length === 1) {
          return code; // This is just a high surrogate with no following low surrogate, so we return its value;
          // we could also throw an error as it is not a complete character, but someone may want to know
        }
        var low = str.charCodeAt(1);
        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
      }
      if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
        return code; // This is just a low surrogate with no preceding high surrogate, so we return its value;
        // we could also throw an error as it is not a complete character, but someone may want to know
      }
      return code;
    },
    chr: function(codePt) {
      // http://kevin.vanzonneveld.net
      // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
      // +   improved by: Brett Zamir (http://brett-zamir.me)
      // *     example 1: chr(75);
      // *     returns 1: 'K'
      // *     example 1: chr(65536) === '\uD800\uDC00';
      // *     returns 1: true
      if (codePt > 0xFFFF) { // Create a four-byte string (length 2) since this code point is high
        //   enough for the UTF-16 encoding (JavaScript internal use), to
        //   require representation with two surrogates (reserved non-characters
        //   used for building other characters; the first is "high" and the next "low")
        codePt -= 0x10000;
        return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 + (codePt & 0x3FF));
      }
      return String.fromCharCode(codePt);
    }
}
