using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FacebookGraphAPIHelper;
using FacebookGraphAPIHelper.Objects;
using System.Drawing;
using Newtonsoft.Json;
using System.IO;
using System.Security.Cryptography;

namespace GAPITEST
{
    class Program
    {
        static void Main(string[] args)
        {
            
            //uphUserId	uphPageToken	uphAppSecret	uphAppId	uphPageId
            //1091321741005034	EAAFFru3lRl0BAO8M52suZA1bDDuU4Sofsl85QZAVB3erojkZCTYBhnH6WXIQYl8gdxrbT57xZBrq1ZBOyiyUprYu1ERq1BMwmVKicDoUehDNkp66n6NSihqsZBjMV7eLV7yNZAZCwniekMYut2c8u12B9Dyb7z8X4HKIxp9gmPLZAmQZDZD	81f78efeb40c979e3c029d9f8c533212	358092594562653	1369352673095644
            Tools.ClearFile();
            //connection params
            string appID = "391897567851647";
            string appSecret = "52d25a29757683b9e490cb0608cdc0c2";
            string exToken = "EAAFkbcNR9H8BAOhLQCMVU7D2TJ8kVRGFNxHBAPBiMa0aaXktK3avWCeYo8DJFu7tCf4H5XCLrqG5THXAZCtiZCqg1QmdkkV6N5XbpYYJy7bZCbvnLw0gZCC569dKHZBM08Pw7xZCvo0YN8BUqUCZB4dbKuDQdwgOtPs8WZCWENEDYOdQU0QyPxmWgAG7UEEy7BAZD";
            string pageId = "1863819113839065";
            string accToken = "";
            string pageToken = "";
            GraphAPIHelper gepiHelper = new GraphAPIHelper(appID, appSecret, exToken);

            //BaseResponse res = gepiHelper.GetLongLivedAccessToken(exToken, out accToken);
            //Accounts accs;
            //res = gepiHelper.GetUserAccounts(accToken, out accs);
            //Tools.WriteToFile(accs);
            Posts<Post> posts;
            //gepiHelper.GetTopPosts(pageId, accToken, out posts);
            //Tools.WriteToFile(posts);
            //res = gepiHelper.GetPageAccessToken(out pageToken);
            //Tools.WriteToFile(pageToken);
            //----- gepiHelper.PostMessage(pageId, accs.data[0].access_token, "autogenerated message 4");
            //Tools.ClearFile();
            //var url = "https://www.facebook.com/IntegrationTest-1369352673095644/";
            //var a = gepiHelper.GetPageByUrl(url);
            //var pic = gepiHelper.LoadPictureFromUrl(a.picture.data.url);
            //Tools.WriteToFile(a);
            //Tools.WriteToFile(pic);
            //var br = gepiHelper.GetPageByUrl("https://www.facebook.com/TestIra-1491247927554351/");
            //Tools.WriteStringToFile(br);
            
            var br = gepiHelper.GetAllPosts("1369352673095644", out posts);
            /*Tools.WriteStringToFile(posts.data.Count);
            string postsRCount = "";
            var flag = true;
            for (int i = 0; i < posts.data.Count; i++)
            {
                var count = 0;
                if (posts.data[i].reactions != null)
                {
                    postsRCount += i + " " + posts.data[i].reactions.data.Count + "\n";
                    count = posts.data[i].reactions.data.Count;
                }
                if (count > 1000 && flag)
                {
                    Tools.WriteToFile(posts.data[i].reactions);
                    flag = false;
                }
            }*/
            Tools.WriteToFile(posts);
             
            
        //    //Парсим данные из бд.
        //    Tools.ClearFile();
        //    var s
        //    var b = StringToByteArray(s);
        //    Tools.WriteToFile(b);

        }
        //public static byte[] StringToByteArray(string hex)
        //{
        //    return Enumerable.Range(0, hex.Length)
        //                     .Where(x => x % 2 == 0)
        //                     .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
        //                     .ToArray();
        //}
    }
}
